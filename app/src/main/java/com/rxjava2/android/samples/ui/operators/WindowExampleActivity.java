package com.rxjava2.android.samples.ui.operators;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.widget.Button;import android.widget.TextView;import com.rxjava2.android.samples.R;import com.rxjava2.android.samples.utils.AppConstant;import java.util.concurrent.TimeUnit;import io.reactivex.Observable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;import static android.R.attr.value;public class WindowExampleActivity extends AppCompatActivity {    private static final String TAG = WindowExampleActivity.class.getSimpleName();    Button btn;    TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_example);        btn = (Button) findViewById(R.id.btn);        textView = (TextView) findViewById(R.id.textView);        btn.setOnClickListener(v -> doSomeWork());    }    /*     * Example using window operator -> It periodically     * subdivide items from an Observable into     * Observable windows and emit these windows rather than     * emitting the items one at a time     */    /**     * http://reactivex.io/documentation/operators/window.html     * */    protected void doSomeWork() {        Observable.interval(1, TimeUnit.SECONDS).take(12)                .window(3, TimeUnit.SECONDS)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(getConsumer());    }    public Consumer<Observable<Long>> getConsumer() {        return longObservable -> {            Log.e(TAG, "Sub Divide begin....");            textView.append("Sub Divide begin ....");            textView.append(AppConstant.LINE_SEPARATOR);            longObservable                    .subscribeOn(Schedulers.io())                    .observeOn(AndroidSchedulers.mainThread())                    .subscribe(aLong -> {                        Log.e(TAG, "Next:" + value);                        textView.append("Next:" + value);                        textView.append(AppConstant.LINE_SEPARATOR);                    });        };    }}